name: Go Development Pipeline

on:
  push:
    branches:
      - master
    paths:
      - "**.go"
  pull_request:
    branches:
      - master
    paths:
      - "**.go"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.21

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v5
        with:
          version: v1.57

  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.21

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: /go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: |
          # Instalar dependencias del sistema
          sudo apt-get update
          sudo apt-get install -y build-essential libopus-dev libopusfile-dev
          sudo apt-get install -y ffmpeg wget libopusfile0
          sudo apt-get install -y python3-pip python3-venv
          go install github.com/bwmarrin/dca/cmd/dca@latest
          
          # Crear un entorno virtual y activar
          python3 -m venv venv
          source venv/bin/activate

          # Instalar yt-dlp en el entorno virtual
          pip install -U yt-dlp
          pip install -U https://github.com/coletdjnz/yt-dlp-youtube-oauth2/archive/refs/heads/master.zip


          sudo cp venv/bin/yt-dlp /usr/local/bin/
          sudo chmod +x /usr/local/bin/yt-dlp
          
          # Instalar yt-dlp y el paquete oauth2 dentro del entorno virtual
          pip install -U yt-dlp
          pip install -U https://github.com/coletdjnz/yt-dlp-youtube-oauth2/archive/refs/heads/master.zip

      - name: Run unit tests
        run: make unit-test

      - name: Generate unit test coverage report
        run: |
          go test -short -coverprofile=unit-coverage.out ./...
          go tool cover -html=unit-coverage.out -o unit-coverage.html

      - name: Upload unit test coverage report
        uses: actions/upload-artifact@v4
        with:
          name: unit-coverage-report
          path: unit-coverage.html

  integration-tests:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.21

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: /go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEV_GITHUB_ACTION_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Run integration tests
        env:
          YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
          BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
          DYNAMODB_TABLE_NAME_SONGS: ${{ secrets.DYNAMODB_TABLE_NAME_SONGS }}
          DYNAMODB_TABLE_NAME_OPERATION: ${{ secrets.DYNAMODB_TABLE_NAME_OPERATION }}
          SQS_QUEUE_URL: ${{ secrets.SQS_QUEUE_URL }}
        run: make integration-test

      - name: Generate integration test coverage report
        run: |
          go test -run Integration -coverprofile=integration-coverage.out ./...
          go tool cover -html=integration-coverage.out -o integration-coverage.html

      - name: Upload integration test coverage report
        uses: actions/upload-artifact@v4
        with:
          name: integration-coverage-report
          path: integration-coverage.html
